{"version":3,"sources":["components/Header/index.js","components/Navigation/index.js","components/Alert/index.js","components/Badge/index.js","layout/App/index.js","serviceWorker.js","index.js"],"names":["Header","title","Navigation","className","Alert","variant","children","Badge","pill","arrayOfAlerts","array","arrayOfBadges","App","map","item","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAUeA,MARf,YAA4B,IAAVC,EAAS,EAATA,MACjB,OACC,6BACC,4BAAKA,KCQOC,G,MAVI,WAClB,OACC,wBAAIC,UAAU,cACb,iCACA,iCACA,oCCDYC,G,MAJD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACb,yBAAKH,UAAS,gBAAWE,IAAYC,KCOvBC,G,MARD,SAAC,GAAD,IAAGD,EAAH,EAAGA,SAAUD,EAAb,EAAaA,QAASG,EAAtB,EAAsBA,KAAtB,OACb,0BACCL,UAAS,gBAAWE,EAAX,YAAsBG,EAAO,OAAS,IAC/CA,KAAMA,EAAO,OAAS,OACrBF,KCHGG,G,MAAgB,CACrB,CAAER,MAAO,6CAAyCI,QAAS,WAC3D,CAAEJ,MAAO,+CAA2CI,QAAS,aAC7D,CAAEJ,MAAO,6CAAyCI,QAAS,WAC3D,CAAEJ,MAAO,4CAAwCI,QAAS,UAC1D,CAAEJ,MAAO,6CAAyCI,QAAS,WAC3D,CAAEJ,MAAO,0CAAsCI,QAAS,QACxD,CAAEJ,MAAO,2CAAuCI,QAAS,SACzD,CAAEJ,MAAO,0CAAsCI,QAAS,UAGnDK,EAAQ,CACb,uBACA,uBACA,wBAGKC,EAAgB,CACrB,CAAEV,MAAO,UAAWI,QAAS,UAAWG,MAAM,GAC9C,CAAEP,MAAO,YAAaI,QAAS,YAAaG,MAAM,GAClD,CAAEP,MAAO,UAAWI,QAAS,UAAWG,MAAM,GAC9C,CAAEP,MAAO,SAAUI,QAAS,SAAUG,MAAM,GAC5C,CAAEP,MAAO,UAAWI,QAAS,UAAWG,MAAM,GAC9C,CAAEP,MAAO,OAAQI,QAAS,OAAQG,MAAM,GACxC,CAAEP,MAAO,QAASI,QAAS,QAASG,MAAM,GAC1C,CAAEP,MAAO,OAAQI,QAAS,OAAQG,MAAM,IAwC1BI,EArCH,WACX,OACC,yBAAKT,UAAU,WACbO,EAAMG,KAAI,SAACC,EAAMC,GACjB,OAAO,kBAAC,EAAD,CAAQd,MAAOa,EAAME,IAAKD,OAGlC,kBAAC,EAAD,CAAQd,MAAM,yBACd,kBAAC,EAAD,CAAQA,MAAM,yBACd,kBAAC,EAAD,CAAQA,MAAM,yBAEd,kBAAC,EAAD,MACA,4BACC,iCACA,iCACA,kCAGAQ,EAAcI,KAAI,SAACC,EAAMC,GACzB,OACC,kBAAC,EAAD,CAAOC,IAAKD,EAAGV,QAASS,EAAKT,SAC3BS,EAAKb,UAKRU,EAAcE,KAAI,SAACC,EAAMC,GACzB,OACC,kBAAC,EAAD,CAAOC,IAAKD,EAAGV,QAASS,EAAKT,QAASG,KAAMM,EAAKN,MAC/CM,EAAKb,YCjDQgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KAEC,kBAAC,EAAD,OAIDC,SAASC,eAAe,SD+GnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fc35aee6.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header({ title }) {\n\treturn (\n\t\t<div>\n\t\t\t<h1>{title}</h1>\n\t\t</div>\n\t)\n}\n\nexport default Header\n","import React from 'react'\nimport './style.css'\n\nconst Navigation = () => {\n\treturn (\n\t\t<ul className=\"navigation\">\n\t\t\t<li>a</li>\n\t\t\t<li>b</li>\n\t\t\t<li>c</li>\n\t\t</ul>\n\t)\n}\n\nexport default Navigation\n","import React from 'react'\nimport './style.css'\n\nconst Alert = ({ variant, children }) => (\n\t<div className={`alert ${variant}`}>{children}</div>\n)\n\nexport default Alert\n","import React from 'react'\nimport './style.css'\n\nconst Badge = ({ children, variant, pill }) => (\n\t<span\n\t\tclassName={`badge ${variant} ${pill ? 'pill' : ''}`}\n\t\tpill={pill ? '10px' : '4px'}>\n\t\t{children}\n\t</span>\n)\n\nexport default Badge\n","import React from 'react'\nimport { Header, Navigation, Alert, Badge } from '../../components'\nimport './App.css'\n\nconst arrayOfAlerts = [\n\t{ title: 'This is a primary alert—check it out!', variant: 'primary' },\n\t{ title: 'This is a secondary alert—check it out!', variant: 'secondary' },\n\t{ title: 'This is a success alert—check it out!', variant: 'success' },\n\t{ title: 'This is a danger alert—check it out!', variant: 'danger' },\n\t{ title: 'This is a warning alert—check it out!', variant: 'warning' },\n\t{ title: 'This is a info alert—check it out!', variant: 'info' },\n\t{ title: 'This is a light alert—check it out!', variant: 'light' },\n\t{ title: 'This is a dark alert—check it out!', variant: 'dark' },\n]\n\nconst array = [\n\t'Toto je moj nadpis A',\n\t'Toto je moj nadpis B',\n\t'Toto je moj nadpis C',\n]\n\nconst arrayOfBadges = [\n\t{ title: 'Primary', variant: 'primary', pill: false },\n\t{ title: 'Secondary', variant: 'secondary', pill: true },\n\t{ title: 'Success', variant: 'success', pill: true },\n\t{ title: 'Danger', variant: 'danger', pill: true },\n\t{ title: 'Warning', variant: 'warning', pill: true },\n\t{ title: 'Info', variant: 'info', pill: true },\n\t{ title: 'Light', variant: 'light', pill: true },\n\t{ title: 'Dark', variant: 'dark', pill: false },\n]\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"wrapper\">\n\t\t\t{array.map((item, i) => {\n\t\t\t\treturn <Header title={item} key={i} />\n\t\t\t})}\n\n\t\t\t<Header title=\"Toto je moj nadpis A\" />\n\t\t\t<Header title=\"Toto je moj nadpis B\" />\n\t\t\t<Header title=\"Toto je moj nadpis C\" />\n\n\t\t\t<Navigation />\n\t\t\t<ul>\n\t\t\t\t<li>a</li>\n\t\t\t\t<li>b</li>\n\t\t\t\t<li>c</li>\n\t\t\t</ul>\n\n\t\t\t{arrayOfAlerts.map((item, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Alert key={i} variant={item.variant}>\n\t\t\t\t\t\t{item.title}\n\t\t\t\t\t</Alert>\n\t\t\t\t)\n\t\t\t})}\n\n\t\t\t{arrayOfBadges.map((item, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Badge key={i} variant={item.variant} pill={item.pill}>\n\t\t\t\t\t\t{item.title}\n\t\t\t\t\t</Badge>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n// import ThemeProvider from 'styled-components'\nimport './styles/reset.css'\nimport './styles/index.css'\nimport App from './layout/App'\n// import AppS from './layout/AppS'\nimport * as serviceWorker from './serviceWorker'\n\n// const theme = {\n// \tmain: 'mediumseagreen',\n// }\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t{/* <ThemeProvider theme={theme}> */}\n\t\t<App />\n\t\t{/* <AppS /> */}\n\t\t{/* </ThemeProvider> */}\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}